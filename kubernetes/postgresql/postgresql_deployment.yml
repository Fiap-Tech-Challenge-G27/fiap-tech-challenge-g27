apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgresql
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgresql
  template:
    metadata:
      labels:
        app: postgresql
    spec:
      volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: postgresql-data
        - name: postgresql-initdb
          configMap:
            name: initdb
      containers:
        - name: postgresql
          image: postgres:latest
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 5432
          envFrom:
            - configMapRef:
                name: postgresql-configmap
          volumeMounts:
            - name: postgresql-data
              mountPath: /var/lib/postgresql/data
            - name: postgresql-initdb
              mountPath: /docker-entrypoint-initdb.d
          resources:
            limits:
              memory: "512Mi"
              cpu: "0.5"
      restartPolicy: Always

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgresql-configmap
data:
  POSTGRES_USER: 'admin'
  POSTGRES_PASSWORD: 'admin'
  POSTGRES_DB: 'app'


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: initdb
data:
   init.sql: |
    drop table if exists "orders";
    drop type if exists "order_status";
    create type "order_status" as enum ('PendingPayment', 'Received', 'InPreparation', 'Ready', 'Finished');
    create table "orders"(
        "order_id" BIGINT primary key,
        "customer_id" BIGINT not null,
        "receivementTime" TIMESTAMP with time zone not null,
        "status" order_status
    );


    drop table if exists "products";
    drop type if exists "product_categories";
    create type "product_categories" as enum ('Snack', 'SideDish', 'Drink', 'Desert');
    create table "products"(
        "product_id" BIGINT primary key,
        "name" CHAR(255) not null,
        "description" CHAR(255) not null,
        "price" DOUBLE PRECISION not null,
        "category" product_categories not null
    );


    drop table if exists "customers";
    create table "customers"(
        "customer_id" BIGINT primary key,
        "cpf" CHAR(11) not null,
        "name" CHAR(200) not null,
        "email" CHAR(200) not null,
        constraint "orders_client_id_foreign" foreign key("client_id") references "customers"("client_id")
    );


    drop table if exists "orders_products";
    create table "orders_products"(
        "order_id" BIGINT,
        "product_id" BIGINT,
        "amount" INTEGER not null,
        primary key (order_id, product_id),
      constraint "orders_products_order_id_foreign" foreign key("order_id") references "orders"("order_id"),
      constraint "orders_products_product_id_foreign" foreign key("product_id") references "products"("product_id")
    );

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: postgresql-data
  labels:
    type: local
spec:
  storageClassName: standard
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: '/data'

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgresql-data
spec:
  storageClassName: standard
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi